import type { IndyEndpointAttrib } from './didSovUtil';
import type { IndySdkPool } from '../ledger';
import type { AgentContext, DidRegistrar, DidCreateOptions, DidCreateResult, DidDeactivateResult, DidUpdateResult } from '@aries-framework/core';
import type { NymRole } from 'indy-sdk';
import { DidRepository } from '@aries-framework/core';
import { IndySdkPoolService } from '../ledger';
import { IndySdk } from '../types';
export declare class IndySdkSovDidRegistrar implements DidRegistrar {
    readonly supportedMethods: string[];
    private didRepository;
    private indySdk;
    private indySdkPoolService;
    constructor(didRepository: DidRepository, indySdkPoolService: IndySdkPoolService, indySdk: IndySdk);
    create(agentContext: AgentContext, options: IndySdkSovDidCreateOptions): Promise<DidCreateResult>;
    update(): Promise<DidUpdateResult>;
    deactivate(): Promise<DidDeactivateResult>;
    registerPublicDid(agentContext: AgentContext, submitterDid: string, targetDid: string, verkey: string, alias: string, pool: IndySdkPool, role?: NymRole): Promise<string>;
    setEndpointsForDid(agentContext: AgentContext, did: string, endpoints: IndyEndpointAttrib, pool: IndySdkPool): Promise<void>;
}
export interface IndySdkSovDidCreateOptions extends DidCreateOptions {
    method: 'sov';
    did?: undefined;
    didDocument?: never;
    options: {
        alias: string;
        role?: NymRole;
        endpoints?: IndyEndpointAttrib;
        indyNamespace?: string;
        submitterDid: string;
    };
    secret?: {
        seed?: string;
    };
}
export type IndySdkSovDidUpdateOptions = never;
export type IndySdkSovDidDeactivateOptions = never;
