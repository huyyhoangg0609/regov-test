"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndySdkSovDidResolver = void 0;
const core_1 = require("@aries-framework/core");
const error_1 = require("../error");
const IndySdkPoolService_1 = require("../ledger/IndySdkPoolService");
const types_1 = require("../types");
const didSovUtil_1 = require("./didSovUtil");
let IndySdkSovDidResolver = class IndySdkSovDidResolver {
    constructor(indyPoolService, indySdk) {
        this.supportedMethods = ['sov'];
        this.indySdk = indySdk;
        this.indySdkPoolService = indyPoolService;
    }
    async resolve(agentContext, did, parsed) {
        const didDocumentMetadata = {};
        try {
            const nym = await this.getPublicDid(agentContext, parsed.id);
            const endpoints = await this.getEndpointsForDid(agentContext, parsed.id);
            const keyAgreementId = `${parsed.did}#key-agreement-1`;
            const builder = (0, didSovUtil_1.sovDidDocumentFromDid)(parsed.did, nym.verkey);
            (0, didSovUtil_1.addServicesFromEndpointsAttrib)(builder, parsed.did, endpoints, keyAgreementId);
            return {
                didDocument: builder.build(),
                didDocumentMetadata,
                didResolutionMetadata: { contentType: 'application/did+ld+json' },
            };
        }
        catch (error) {
            return {
                didDocument: null,
                didDocumentMetadata,
                didResolutionMetadata: {
                    error: 'notFound',
                    message: `resolver_error: Unable to resolve did '${did}': ${error}`,
                },
            };
        }
    }
    async getPublicDid(agentContext, did) {
        // Getting the pool for a did also retrieves the DID. We can just use that
        const { did: didResponse } = await this.indySdkPoolService.getPoolForDid(agentContext, did);
        return didResponse;
    }
    async getEndpointsForDid(agentContext, did) {
        var _a;
        const { pool } = await this.indySdkPoolService.getPoolForDid(agentContext, did);
        try {
            agentContext.config.logger.debug(`Get endpoints for did '${did}' from ledger '${pool.didIndyNamespace}'`);
            const request = await this.indySdk.buildGetAttribRequest(null, did, 'endpoint', null, null);
            agentContext.config.logger.debug(`Submitting get endpoint ATTRIB request for did '${did}' to ledger '${pool.didIndyNamespace}'`);
            const response = await this.indySdkPoolService.submitReadRequest(pool, request);
            if (!response.result.data)
                return {};
            const endpoints = (_a = JSON.parse(response.result.data)) === null || _a === void 0 ? void 0 : _a.endpoint;
            agentContext.config.logger.debug(`Got endpoints '${JSON.stringify(endpoints)}' for did '${did}' from ledger '${pool.didIndyNamespace}'`, {
                response,
                endpoints,
            });
            return endpoints !== null && endpoints !== void 0 ? endpoints : {};
        }
        catch (error) {
            agentContext.config.logger.error(`Error retrieving endpoints for did '${did}' from ledger '${pool.didIndyNamespace}'`, {
                error,
            });
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
};
IndySdkSovDidResolver = __decorate([
    (0, core_1.injectable)(),
    __param(1, (0, core_1.inject)(types_1.IndySdkSymbol)),
    __metadata("design:paramtypes", [IndySdkPoolService_1.IndySdkPoolService, Object])
], IndySdkSovDidResolver);
exports.IndySdkSovDidResolver = IndySdkSovDidResolver;
//# sourceMappingURL=IndySdkSovDidResolver.js.map