import type { IndySdk } from '../types';
import type { FileSystem, Logger } from '@aries-framework/core';
import type { LedgerReadReplyResponse, LedgerRequest, LedgerWriteReplyResponse } from 'indy-sdk';
import type { Subject } from 'rxjs';
export interface TransactionAuthorAgreement {
    version: `${number}.${number}` | `${number}`;
    acceptanceMechanism: string;
}
export interface IndySdkPoolConfig {
    genesisPath?: string;
    genesisTransactions?: string;
    id: string;
    isProduction: boolean;
    indyNamespace: string;
    transactionAuthorAgreement?: TransactionAuthorAgreement;
}
export declare class IndySdkPool {
    private indySdk;
    private logger;
    private fileSystem;
    private poolConfig;
    private _poolHandle?;
    private poolConnected?;
    authorAgreement?: AuthorAgreement | null;
    constructor(poolConfig: IndySdkPoolConfig, indySdk: IndySdk, logger: Logger, stop$: Subject<boolean>, fileSystem: FileSystem);
    get didIndyNamespace(): string;
    get id(): string;
    get config(): IndySdkPoolConfig;
    close(): Promise<void>;
    delete(): Promise<void>;
    connect(): Promise<number>;
    private connectToLedger;
    private submitRequest;
    submitReadRequest(request: LedgerRequest): Promise<LedgerReadReplyResponse>;
    submitWriteRequest(request: LedgerRequest): Promise<LedgerWriteReplyResponse>;
    private getPoolHandle;
    private getGenesisPath;
}
export interface AuthorAgreement {
    digest: string;
    version: string;
    text: string;
    ratification_ts: number;
    acceptanceMechanisms: AcceptanceMechanisms;
}
export interface AcceptanceMechanisms {
    aml: Record<string, string>;
    amlContext: string;
    version: string;
}
