"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndySdkIssuerService = void 0;
const core_1 = require("@aries-framework/core");
const error_1 = require("../../error");
const types_1 = require("../../types");
const assertIndySdkWallet_1 = require("../../utils/assertIndySdkWallet");
const proverDid_1 = require("../utils/proverDid");
const tails_1 = require("../utils/tails");
const transform_1 = require("../utils/transform");
let IndySdkIssuerService = class IndySdkIssuerService {
    constructor(indySdk) {
        this.indySdk = indySdk;
    }
    async createSchema(agentContext, options) {
        const { issuerId, name, version, attrNames } = options;
        (0, assertIndySdkWallet_1.assertIndySdkWallet)(agentContext.wallet);
        try {
            const [, schema] = await this.indySdk.issuerCreateSchema(issuerId, name, version, attrNames);
            return {
                issuerId,
                attrNames: schema.attrNames,
                name: schema.name,
                version: schema.version,
            };
        }
        catch (error) {
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    async createCredentialDefinition(agentContext, options, metadata) {
        const { tag, supportRevocation, schema, issuerId, schemaId } = options;
        if (!metadata)
            throw new core_1.AriesFrameworkError('The metadata parameter is required when using Indy, but received undefined.');
        try {
            (0, assertIndySdkWallet_1.assertIndySdkWallet)(agentContext.wallet);
            const [, credentialDefinition] = await this.indySdk.issuerCreateAndStoreCredentialDef(agentContext.wallet.handle, issuerId, (0, transform_1.indySdkSchemaFromAnonCreds)(schemaId, schema, metadata.indyLedgerSchemaSeqNo), tag, 'CL', {
                support_revocation: supportRevocation,
            });
            return {
                credentialDefinition: {
                    issuerId,
                    tag: credentialDefinition.tag,
                    schemaId,
                    type: 'CL',
                    value: credentialDefinition.value,
                },
            };
        }
        catch (error) {
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    async createCredentialOffer(agentContext, options) {
        (0, assertIndySdkWallet_1.assertIndySdkWallet)(agentContext.wallet);
        try {
            return await this.indySdk.issuerCreateCredentialOffer(agentContext.wallet.handle, options.credentialDefinitionId);
        }
        catch (error) {
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
    async createCredential(agentContext, options) {
        var _a;
        const { tailsFilePath, credentialOffer, credentialRequest, credentialValues, revocationRegistryId } = options;
        (0, assertIndySdkWallet_1.assertIndySdkWallet)(agentContext.wallet);
        try {
            // Indy SDK requires tailsReaderHandle. Use null if no tailsFilePath is present
            const tailsReaderHandle = tailsFilePath ? await (0, tails_1.createTailsReader)(agentContext, tailsFilePath) : 0;
            if (revocationRegistryId || tailsFilePath) {
                throw new core_1.AriesFrameworkError('Revocation not supported yet');
            }
            // prover_did is deprecated and thus if not provided we generate something on our side, as it's still required by the indy sdk
            const proverDid = (_a = credentialRequest.prover_did) !== null && _a !== void 0 ? _a : (0, proverDid_1.generateLegacyProverDidLikeString)();
            const [credential, credentialRevocationId] = await this.indySdk.issuerCreateCredential(agentContext.wallet.handle, credentialOffer, Object.assign(Object.assign({}, credentialRequest), { prover_did: proverDid }), credentialValues, revocationRegistryId !== null && revocationRegistryId !== void 0 ? revocationRegistryId : null, tailsReaderHandle);
            return {
                credential,
                credentialRevocationId,
            };
        }
        catch (error) {
            throw (0, error_1.isIndyError)(error) ? new error_1.IndySdkError(error) : error;
        }
    }
};
IndySdkIssuerService = __decorate([
    (0, core_1.injectable)(),
    __param(0, (0, core_1.inject)(types_1.IndySdkSymbol)),
    __metadata("design:paramtypes", [Object])
], IndySdkIssuerService);
exports.IndySdkIssuerService = IndySdkIssuerService;
//# sourceMappingURL=IndySdkIssuerService.js.map