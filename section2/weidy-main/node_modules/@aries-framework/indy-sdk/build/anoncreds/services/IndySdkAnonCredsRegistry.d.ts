import type { AnonCredsRegistry, GetCredentialDefinitionReturn, GetRevocationStatusListReturn, GetRevocationRegistryDefinitionReturn, GetSchemaReturn, RegisterCredentialDefinitionOptions, RegisterCredentialDefinitionReturn, RegisterSchemaOptions, RegisterSchemaReturn } from '@aries-framework/anoncreds';
import type { AgentContext } from '@aries-framework/core';
/**
 * TODO: validation of the identifiers. The Indy SDK classes only support the legacy (unqualified) identifiers.
 */
export declare class IndySdkAnonCredsRegistry implements AnonCredsRegistry {
    /**
     * This class only supports resolving and registering objects with legacy indy identifiers.
     * It needs to include support for the schema, credential definition, revocation registry as well
     * as the issuer id (which is needed when registering objects).
     */
    readonly supportedIdentifier: RegExp;
    getSchema(agentContext: AgentContext, schemaId: string): Promise<GetSchemaReturn>;
    registerSchema(agentContext: AgentContext, options: IndySdkRegisterSchemaOptions): Promise<RegisterSchemaReturn>;
    getCredentialDefinition(agentContext: AgentContext, credentialDefinitionId: string): Promise<GetCredentialDefinitionReturn>;
    registerCredentialDefinition(agentContext: AgentContext, options: IndySdkRegisterCredentialDefinitionOptions): Promise<RegisterCredentialDefinitionReturn>;
    getRevocationRegistryDefinition(agentContext: AgentContext, revocationRegistryDefinitionId: string): Promise<GetRevocationRegistryDefinitionReturn>;
    getRevocationStatusList(agentContext: AgentContext, revocationRegistryId: string, timestamp: number): Promise<GetRevocationStatusListReturn>;
}
export interface IndySdkRegisterSchemaOptions extends RegisterSchemaOptions {
    options: {
        didIndyNamespace: string;
    };
}
export interface IndySdkRegisterCredentialDefinitionOptions extends RegisterCredentialDefinitionOptions {
    options: {
        didIndyNamespace: string;
    };
}
