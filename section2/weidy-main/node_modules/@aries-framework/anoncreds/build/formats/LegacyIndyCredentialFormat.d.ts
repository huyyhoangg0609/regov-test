import type { AnonCredsAcceptOfferFormat, AnonCredsAcceptProposalFormat, AnonCredsAcceptRequestFormat, AnonCredsOfferCredentialFormat } from './AnonCredsCredentialFormat';
import type { AnonCredsCredential, AnonCredsCredentialOffer, AnonCredsCredentialRequest } from '../models';
import type { CredentialPreviewAttributeOptions, CredentialFormat, LinkedAttachment } from '@aries-framework/core';
/**
 * This defines the module payload for calling CredentialsApi.createProposal
 * or CredentialsApi.negotiateOffer
 *
 * NOTE: This doesn't include the `issuerId` and `schemaIssuerId` properties that are present in the newer format.
 */
export interface LegacyIndyProposeCredentialFormat {
    schemaIssuerDid?: string;
    schemaId?: string;
    schemaName?: string;
    schemaVersion?: string;
    credentialDefinitionId?: string;
    issuerDid?: string;
    attributes?: CredentialPreviewAttributeOptions[];
    linkedAttachments?: LinkedAttachment[];
}
export interface LegacyIndyCredentialRequest extends AnonCredsCredentialRequest {
    prover_did: string;
}
export interface LegacyIndyCredentialFormat extends CredentialFormat {
    formatKey: 'indy';
    credentialRecordType: 'anoncreds';
    credentialFormats: {
        createProposal: LegacyIndyProposeCredentialFormat;
        acceptProposal: AnonCredsAcceptProposalFormat;
        createOffer: AnonCredsOfferCredentialFormat;
        acceptOffer: AnonCredsAcceptOfferFormat;
        createRequest: never;
        acceptRequest: AnonCredsAcceptRequestFormat;
    };
    formatData: {
        proposal: {
            schema_name?: string;
            schema_issuer_did?: string;
            schema_version?: string;
            schema_id?: string;
            cred_def_id?: string;
            issuer_did?: string;
        };
        offer: AnonCredsCredentialOffer;
        request: LegacyIndyCredentialRequest;
        credential: AnonCredsCredential;
    };
}
