import type { AgentContext } from '../../../../agent';
import type { AgentMessage } from '../../../../agent/AgentMessage';
import type { FeatureRegistry } from '../../../../agent/FeatureRegistry';
import type { InboundMessageContext } from '../../../../agent/models/InboundMessageContext';
import type { DependencyManager } from '../../../../plugins';
import type { ProblemReportMessage } from '../../../problem-reports';
import type { ProofFormatService } from '../../formats';
import type { ProofFormat } from '../../formats/ProofFormat';
import type { IndyProofFormat } from '../../formats/indy/IndyProofFormat';
import type { ProofProtocol } from '../ProofProtocol';
import type { AcceptPresentationOptions, AcceptProofProposalOptions, AcceptProofRequestOptions, CreateProofProblemReportOptions, CreateProofProposalOptions, CreateProofRequestOptions, GetCredentialsForRequestOptions, GetCredentialsForRequestReturn, GetProofFormatDataReturn, NegotiateProofProposalOptions, NegotiateProofRequestOptions, ProofProtocolMsgReturnType, SelectCredentialsForRequestOptions, SelectCredentialsForRequestReturn } from '../ProofProtocolOptions';
import { ProofExchangeRecord } from '../../repository/ProofExchangeRecord';
import { BaseProofProtocol } from '../BaseProofProtocol';
import { V1PresentationAckMessage, V1PresentationMessage, V1ProposePresentationMessage, V1RequestPresentationMessage } from './messages';
type IndyProofFormatServiceLike = ProofFormatService<IndyProofFormat>;
export interface V1ProofProtocolConfig {
    indyProofFormat: ProofFormatService<IndyProofFormat>;
}
export declare class V1ProofProtocol extends BaseProofProtocol implements ProofProtocol<[IndyProofFormatServiceLike]> {
    private indyProofFormat;
    constructor({ indyProofFormat }: V1ProofProtocolConfig);
    /**
     * The version of the present proof protocol this protocol supports
     */
    readonly version: "v1";
    /**
     * Registers the protocol implementation (handlers, feature registry) on the agent.
     */
    register(dependencyManager: DependencyManager, featureRegistry: FeatureRegistry): void;
    createProposal(agentContext: AgentContext, { proofFormats, connectionRecord, comment, parentThreadId, autoAcceptProof, }: CreateProofProposalOptions<[IndyProofFormatServiceLike]>): Promise<ProofProtocolMsgReturnType<V1ProposePresentationMessage>>;
    processProposal(messageContext: InboundMessageContext<V1ProposePresentationMessage>): Promise<ProofExchangeRecord>;
    acceptProposal(agentContext: AgentContext, { proofRecord, proofFormats, comment, autoAcceptProof }: AcceptProofProposalOptions<[IndyProofFormatServiceLike]>): Promise<ProofProtocolMsgReturnType<V1RequestPresentationMessage>>;
    negotiateProposal(agentContext: AgentContext, { proofFormats, proofRecord, comment, autoAcceptProof }: NegotiateProofProposalOptions<[IndyProofFormatServiceLike]>): Promise<ProofProtocolMsgReturnType<AgentMessage>>;
    createRequest(agentContext: AgentContext, { proofFormats, connectionRecord, comment, parentThreadId, autoAcceptProof, }: CreateProofRequestOptions<[IndyProofFormatServiceLike]>): Promise<ProofProtocolMsgReturnType<AgentMessage>>;
    processRequest(messageContext: InboundMessageContext<V1RequestPresentationMessage>): Promise<ProofExchangeRecord>;
    negotiateRequest(agentContext: AgentContext, { proofFormats, proofRecord, comment, autoAcceptProof }: NegotiateProofRequestOptions<[IndyProofFormatServiceLike]>): Promise<ProofProtocolMsgReturnType<AgentMessage>>;
    acceptRequest(agentContext: AgentContext, { proofRecord, proofFormats, autoAcceptProof, comment }: AcceptProofRequestOptions<[IndyProofFormatServiceLike]>): Promise<ProofProtocolMsgReturnType<AgentMessage>>;
    getCredentialsForRequest(agentContext: AgentContext, { proofRecord, proofFormats }: GetCredentialsForRequestOptions<[IndyProofFormatServiceLike]>): Promise<GetCredentialsForRequestReturn<[IndyProofFormatServiceLike]>>;
    selectCredentialsForRequest(agentContext: AgentContext, { proofRecord, proofFormats }: SelectCredentialsForRequestOptions<[IndyProofFormatServiceLike]>): Promise<SelectCredentialsForRequestReturn<[IndyProofFormatServiceLike]>>;
    processPresentation(messageContext: InboundMessageContext<V1PresentationMessage>): Promise<ProofExchangeRecord>;
    acceptPresentation(agentContext: AgentContext, { proofRecord }: AcceptPresentationOptions): Promise<ProofProtocolMsgReturnType<V1PresentationAckMessage>>;
    processAck(messageContext: InboundMessageContext<V1PresentationAckMessage>): Promise<ProofExchangeRecord>;
    createProblemReport(agentContext: AgentContext, { proofRecord, description }: CreateProofProblemReportOptions): Promise<ProofProtocolMsgReturnType<ProblemReportMessage>>;
    shouldAutoRespondToProposal(agentContext: AgentContext, options: {
        proofRecord: ProofExchangeRecord;
        proposalMessage: V1ProposePresentationMessage;
    }): Promise<boolean>;
    shouldAutoRespondToRequest(agentContext: AgentContext, options: {
        proofRecord: ProofExchangeRecord;
        requestMessage: V1RequestPresentationMessage;
    }): Promise<boolean>;
    shouldAutoRespondToPresentation(agentContext: AgentContext, options: {
        proofRecord: ProofExchangeRecord;
        presentationMessage: V1PresentationMessage;
    }): Promise<boolean>;
    findProposalMessage(agentContext: AgentContext, proofRecordId: string): Promise<V1ProposePresentationMessage | null>;
    findRequestMessage(agentContext: AgentContext, proofRecordId: string): Promise<V1RequestPresentationMessage | null>;
    findPresentationMessage(agentContext: AgentContext, proofRecordId: string): Promise<V1PresentationMessage | null>;
    getFormatData(agentContext: AgentContext, proofRecordId: string): Promise<GetProofFormatDataReturn<ProofFormat[]>>;
    private assertOnlyIndyFormat;
}
export {};
